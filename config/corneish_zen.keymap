#define MOUSE_KEYS

#include <behaviors.dtsi>
#include "italian.keycodes"

#ifdef MOUSE_KEYS
#   include "mouse.dtsi"
#endif

#ifndef KEYMAP_DRAWER
#   include "keys_en_gb.h"
#endif

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MS_ACT(key) &lt MSE key

// Layer definitions

#define BASE 0
#define NAVI 1
#define NUM 2
#define FUNC 3
#define QUICK 4
#define MOUSE 5

#define LOCK 6
#define COMBO_TIMEOUT_MS 80

#define XXXXX &none
#define ___ &trans

// tapping term definition
#define TAP_TERM_MS 200
#define QUICK_TAP_MS 125

// 36 keys physical layout
#define LEFT_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 // left-hand keys
#define RIGHT_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 // right-hand keys
#define THUMBS 30 31 32 33 34 35 // thumb keys

// -----------------

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

// tune sticky key
&sk {
    release-after-ms = <1000>;
    quick-release;
};

/ {
    macros {
        /omit-if-no-ref/

        zed_em_kay: zed_em_kay {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp GB_Z &kp GB_M &kp GB_K>,
                <&macro_release>,
                <&kp LSHFT>;
        };


        dot_spc: dot_spc{
            label = "ZM_DOT_SPACE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        };


        /**
		* Temporarily switches to a layer (`&mo`) while a modifier is held.
		* Analogous to QMK's `LM()`, using a parameterized macro.
		*
		* Params:
		*  1. Layer to switch to
		*  2. Modifier to press while layer is active
		*
		* Example:
		*  `&lm NUM_LAYER LSHIFT`
		*/

        /omit-if-no-ref/

        lm: lm {
            label = "Layer Mod";
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

    };
};

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };
};

//KEYMAP

/ {
    behaviors {
        /omit-if-no-ref/

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        /omit-if-no-ref/
        // HOME ROW MODS
        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;                              // Must be <2> for "hold-tap" as per documentation
            flavor = "balanced";
            tapping-term-ms = <TAP_TERM_MS>;                   // How long in milliseconds the key must be held to trigger a hold
            quick-tap-ms = <QUICK_TAP_MS>;                     // double-tap + hold repeats tap-key
            require-prior-idle-ms = <150>;                     // do not activate HOLD during typing flow
            bindings = <&kp>, <&kp>;                           // A list of two behaviors (without parameters): one for hold and one for tap
            hold-trigger-key-positions = <RIGHT_KEYS THUMBS>;  // If set, pressing the hold-tap and then any key position not in the list triggers a tap.
            hold-trigger-on-release;
        };

        /omit-if-no-ref/
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;       // double-tap + hold repeats tap-key
            require-prior-idle-ms = <150>;       // do not activate HOLD during typing flow
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_KEYS THUMBS>;
            hold-trigger-on-release;
        };

        // Swapper for smart alt+tab

        /omit-if-no-ref/

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            //ignored-key-positions = <SWP_POS>;
        };

/*
        // tap: space | shft + tap: dot -> space -> sticky shift | hold: activate layer
        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPC_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&dot_spc>;
        };
        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            #binding-cells = <2>;
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            flavor = "balanced";
            bindings = <&mo>, <&spc_morph>;
        };
*/

        // TAP Dances
        cap_after_period: cap_after_period {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_cap_after_period";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_TERM_MS>;
            bindings = <&kp GB_DOT>, <&dot_spc>;
        };

    };

/*                KEY POSITIONS
36 keys:

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
          ╰────────────╯ ╰────────────╯
*/

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <12 16>;
            layers = <BASE>;
            require-prior-idle-ms = <1000>;
        };

        LOCK_keyboard {
            bindings = <&tog LOCK>;
            key-positions = <0 9 32 33>;
            timeout-ms = <40>;
            require-prior-idle-ms = <1000>;
        };


        ///////// Left-hand combos

        tab_1 {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            layers = <BASE>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        backtick {
            bindings = <&kp GB_GRAVE>;
            key-positions = <0 10>;
            layers = <BASE>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <BASE>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <BASE>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };


        ///////// Right-hand combos
        // this are supposed to be double quotes

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <BASE>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        minus {
            bindings = <&kp GB_MINUS>;
            key-positions = <17 18>;
            layers = <BASE>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <9 19>;
            layers = <BASE>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };


        question {
            bindings = <&kp GB_QUESTION>;
            key-positions = <28 29>;
            layers = <BASE>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        apostrophe {
            bindings = <&kp GB_APOSTROPHE>;
            key-positions = <19 18>;
            layers = <BASE>;
        };

        windows {
            bindings = <&kp LWIN>;
            key-positions = <30 31>;
            layers = <BASE>;
            require-prior-idle-ms = <1000>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer
        // legenda:
        // 
        // kp = tap
        // mt = hold
        // hm = homerow_mods
        // lt = layer_tap
        // &kp LS(A) = LEFT_SHIFT+A
        // &kp LC(RA(B)) = LEFT_CONTROL+RIGHT_ALT+B

        BASE_layer {
            label = "BASE";
            bindings = <
//╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮     ╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮
        &kp GB_Q       &kp GB_W        &kp GB_E          &kp GB_R       &kp GB_T                &kp GB_Y       &kp GB_U          &kp GB_I        &kp GB_O         &kp GB_P
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
        &kp GB_A    &hml LALT GB_S  &hml LSHIFT GB_D  &hml LCTRL GB_F    &kp GB_G           &hmr RCTRL GB_H  &hmr RSHFT GB_J  &hmr RALT GB_K       &kp GB_L       &kp ENTER
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
    &mt LCTRL GB_Z      &kp GB_X        &kp GB_C         &kp GB_V        &kp GB_B               &kp GB_N       &kp GB_M        &kp GB_COMMA  &cap_after_period      &kp GB_SLASH
//╰───────────────┴────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┴───────────────╯
                                &lm QUICK LALT  &lt NAVI GB_SPACE &to NAVI  &to BASE        &lt NUM GB_SPACE   XXXXX
//                                 ╰────────────────┴────────────────┴───────────────╯     ╰───────────────┴────────────────┴────────────────╯
            >;
        };

        NAVI_layer {
            label = "NAVI";
            bindings = <
//╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮     ╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮
&kp GB_ESCAPE_CHARACTER &msc SCRL_LEFT &mmv MOVE_UP   &msc SCRL_RIGHT   &msc SCRL_UP           &kp PG_UP        &kp HOME          &kp UP         &kp END        &kp BACKSPACE
//├──────────────┼─────────────────┼────────────────┼────────────────┼────────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
     &kp LSHIFT    &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN           &kp PG_DN        &kp LEFT          &kp DOWN       &kp RIGHT        &kp DELETE
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
&mt GB_PIPE GB_GRAVE   &kp LCTRL        &mkp LCLK       &mkp RCLK        &mkp MCLK             &kp INS         &kp RC(TAB)    &kp LC(LS(TAB))    &kp PSCRN      &mt GB_AT_SIGN GB_SINGLE_QUOTE
//╰───────────────┴────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┴───────────────╯
                                         XXXXX           XXXXX           &to NUM               &to BASE        &mkp LCLK        &mkp RCLK
//                                 ╰────────────────┴────────────────┴───────────────╯     ╰───────────────┴────────────────┴────────────────╯
            >;
        };

        SYMB_layer {
            label = "SYMB";
            bindings = <
//╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮     ╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮
       &kp GB_N1      &kp GB_N2         &kp GB_N3        &kp GB_N4       &kp GB_N5             &kp GB_N6       &kp GB_N7        &kp GB_N8         &kp GB_N9       &kp GB_N0
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
 &kp GB_LESS_THAN   &hm LALT GB_LEFT_PARENTHESIS  &hml LSHIFT GB_LEFT_BRACE  &hml LCTRL GB_LEFT_BRACKET  &kp GB_MINUS       &hmr RCTRL GB_EQUAL  &hmr RSHFT GB_TILDE  &hmr RALT GB_HASH  &kp GB_SINGLE_QUOTE  &kp GB_BACKSLASH
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
&kp GB_GREATER_THAN    &kp RPAR    &kp GB_RIGHT_BRACE &kp GB_RIGHT_BRACKET &kp GB_UNDERSCORE  &kp GB_PLUS    &kp GB_AT_SIGN  &kp GB_SEMICOLON    &kp GB_COLON    &kp GB_PIPE
//╰───────────────┴────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┴───────────────╯
                                          XXXXX      &kp GB_AMPERSAND  &to FUNC                &to BASE     &kp GB_ASTERISK       XXXXX
//                                 ╰────────────────┴────────────────┴───────────────╯     ╰───────────────┴────────────────┴────────────────╯
            >;
        };

        FUNC_layer {
            label = "FUNC";
            bindings = <
//╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮     ╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮
        &kp F1          &kp F2           &kp F3           &kp F4          &kp F5                 &kp F6         &kp F7            &kp F8           &kp F9          &kp F10
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
     &kp C_MUTE     &kp C_VOL_DN      &kp C_VOL_UP    &kp C_BRI_DN     &kp C_BRI_UP      &hmr RCTRL GB_SPACE  &hmr RSHFT GB_SPACE  &hmr RALT GB_SPACE   XXXXX    &kp F11
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
    &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2      &bootloader     &bt BT_CLR            &sys_reset      &bootloader       &bt BT_PRV       &bt BT_NXT        &kp F12
//╰───────────────┴────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┴───────────────╯
                                          XXXXX            XXXXX         &to MOUSE              &to BASE      &out OUT_USB     &out OUT_BLE
//                                 ╰────────────────┴────────────────┴───────────────╯     ╰───────────────┴────────────────┴────────────────╯
            >;
        };

        QUICK_layer {
            bindings = <
//╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮     ╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮
    &kp GB_GRAVE        &kp TAB            ___              ___             ___                   ___              ___              ___              ___              ___
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
        &kp TAB          ___               ___              ___             ___                   ___              ___              ___              ___              ___
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
          ___            ___               ___              ___             ___                   ___              ___              ___              ___              ___
//╰───────────────┴────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┴───────────────╯
                                        &kp LALT            ___             ___                   ___              ___             XXXXX
//                                 ╰────────────────┴────────────────┴───────────────╯     ╰───────────────┴────────────────┴────────────────╯
            >;

            label = "QUICK";
        };

        MOUSE_layer {
            label = "MOUSE";
            bindings = <
//╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮     ╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮
        XXXXX          XXXXX             XXXXX             XXXXX            XXXXX            &msc SCRL_LEFT   &msc SCRL_DOWN    &mmv MOVE_UP      &msc SCRL_UP   &msc SCRL_RIGHT
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
        &kp LCTRL      &kp LGUI          &kp LALT         &kp LSHFT         XXXXX                 XXXXX        &mmv MOVE_LEFT &mmv MOVE_DOWN  &mmv MOVE_RIGHT       XXXXX
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
        XXXXX          XXXXX             XXXXX             XXXXX            XXXXX                 XXXXX          &mkp MB4        &mkp MCLK        &mkp MB5           XXXXX
//╰───────────────┴────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┴───────────────╯
                                         XXXXX             XXXXX          &to NAVI             &to BASE          &mkp LCLK      &mkp RCLK
//                                 ╰────────────────┴────────────────┴───────────────╯     ╰───────────────┴────────────────┴────────────────╯
            >;
        };

        LOCK_layer {
            label = "LOCK";
            bindings = <
//╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮     ╭───────────────┬────────────────┬────────────────┬────────────────┬───────────────╮
        XXXXX           XXXXX            XXXXX            XXXXX            XXXXX                  XXXXX            XXXXX            XXXXX          XXXXX            XXXXX
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
        XXXXX           XXXXX            XXXXX            XXXXX            XXXXX                  XXXXX            XXXXX            XXXXX          XXXXX            XXXXX
//├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┼───────────────┤
        XXXXX           XXXXX            XXXXX            XXXXX            XXXXX                  XXXXX            XXXXX            XXXXX          XXXXX             XXXXX
//╰───────────────┴────────────────┼────────────────┼────────────────┼───────────────┤     ├───────────────┼────────────────┼────────────────┼────────────────┴───────────────╯
                                         XXXXX            XXXXX            XXXXX                  XXXXX            XXXXX            XXXXX
//                                 ╰────────────────┴────────────────┴───────────────╯     ╰───────────────┴────────────────┴────────────────╯
>;
        };
    };
};
