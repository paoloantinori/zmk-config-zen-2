#define MOUSE_KEYS

#include <behaviors.dtsi>
#include "italian.keycodes"

#ifdef MOUSE_KEYS
#   include "mouse.dtsi"
#endif

#ifndef KEYMAP_DRAWER
#   include "keys_en_gb.h"
#endif

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MS_ACT(key) &lt MSE key

// Layer definitions

#define BASE 0
#define NAVIGATION 1
#define NUM 2
#define FUNCTIONS 3
#define SHORTCUTS 4
#define MOUSE 5
#define COMBO_TIMEOUT_MS <80>

// -----------------

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    macros {
        zed_em_kay: zed_em_kay {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp GB_Z &kp GB_M &kp GB_K>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        /**
		* Temporarily switches to a layer (`&mo`) while a modifier is held.
		* Analogous to QMK's `LM()`, using a parameterized macro.
		*
		* Params:
		*  1. Layer to switch to
		*  2. Modifier to press while layer is active
		*
		* Example:
		*  `&lm NUM_LAYER LSHIFT`
		*/

        /omit-if-no-ref/

        lm: lm {
            label = "Layer Mod";
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };
};

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };
};

//KEYMAP

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // Swapper for smart alt+tab

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            //ignored-key-positions = <SWP_POS>;
        };
    };

    /*                KEY POSITIONS
36 keys:

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
          ╰────────────╯ ╰────────────╯
*/

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <12 16>;
            layers = <0>;
            timeout-ms = <40>;
            require-prior-idle-ms = <1000>;
        };

        tab_1 {
            bindings = <&kp TAB>;
            key-positions = <11 13>;
            layers = <0>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        ///////// Left-hand combos

        backtick {
            bindings = <&kp GB_GRAVE>;
            key-positions = <0 10>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
        };

        left_brace {
            bindings = <&kp GB_LEFT_BRACE>;
            key-positions = <2 3>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
            require-prior-idle-ms = <1000>;
        };

        left_parenthesis {
            bindings = <&kp GB_LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
            require-prior-idle-ms = <1000>;
        };

        left_bracket {
            bindings = <&kp GB_LEFT_BRACKET>;
            key-positions = <22 23>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
            require-prior-idle-ms = <1000>;
        };

        ///////// Right-hand combos
        // this are supposed to be double quotes

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
        };

        minus {
            bindings = <&kp GB_MINUS>;
            key-positions = <17 18>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <9 19>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
        };

        right_brace {
            bindings = <&kp GB_RIGHT_BRACE>;
            key-positions = <6 7>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
            require-prior-idle-ms = <1000>;
        };

        right_parenthesis {
            bindings = <&kp GB_RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
            require-prior-idle-ms = <1000>;
        };

        right_bracket {
            bindings = <&kp GB_RIGHT_BRACKET>;
            key-positions = <26 27>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
            require-prior-idle-ms = <1000>;
        };

        question {
            bindings = <&kp GB_QUESTION>;
            key-positions = <28 29>;
            layers = <0>;
            timeout-ms =
            COMBO_TIMEOUT_MS;
        };

        apostrophe {
            bindings = <&kp GB_APOSTROPHE>;
            key-positions = <19 18>;
            layers = <0>;
        };

        windows {
            bindings = <&kp LWIN>;
            key-positions = <30 31>;
            layers = <0>;
            require-prior-idle-ms = <1000>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer
        // legenda:
        // 
        // kp = tap
        // mt = hold
        // hm = homerow_mods
        // lt = layer_tap
        // &kp LS(A) = LEFT_SHIFT+A
        // &kp LC(RA(B)) = LEFT_CONTROL+RIGHT_ALT+B

        default_layer {
            label = "BASE";
            bindings = <
&kp GB_Q        &kp GB_W       &kp GB_E         &kp GB_R            &kp GB_T                 &kp GB_Y        &kp GB_U        &kp GB_I          &kp GB_O    &kp GB_P
&kp GB_A        &hm LALT GB_S  &hm LSHIFT GB_D  &hm LCTRL GB_F      &kp GB_G                 &hm RCTRL GB_H  &hm RSHFT GB_J  &hm RALT GB_K     &kp GB_L    &kp ENTER
&mt LCTRL GB_Z  &kp GB_X       &kp GB_C         &kp GB_V            &kp GB_B                 &kp GB_N        &kp GB_M        &kp GB_COMMA      &kp GB_DOT  &kp GB_SLASH
                                                &lm SHORTCUTS LALT  &lt NAVIGATION GB_SPACE  &to NAVIGATION  &to BASE        &lt NUM GB_SPACE  &none
            >;
        };

        navigation_layer {
            label = "NAVI";
            bindings = <
&kp GB_ESCAPE_CHARACTER  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP    &kp PG_UP  &kp HOME     &kp UP           &kp END    &kp BACKSPACE
&kp LSHIFT               &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &kp PG_DN  &kp LEFT     &kp DOWN         &kp RIGHT  &none
&mt GB_PIPE GB_GRAVE     &kp LCTRL       &mkp LCLK       &mkp RCLK        &mkp RCLK       &kp INS    &kp RC(TAB)  &kp LC(LS(TAB))  &kp PSCRN  &mt GB_AT_SIGN GB_SINGLE_QUOTE
                                                         &none            &none           &to NUM    &to BASE     &mkp LCLK        &mkp RCLK
            >;
        };

        numsymbol_layer {
            label = "SYMB";
            bindings = <
&kp GB_N1            &kp GB_N2                     &kp GB_N3                 &kp GB_N4                  &kp GB_N5          &kp GB_N6           &kp GB_N7                 &kp GB_N8         &kp GB_N9         &kp GB_N0
&kp GB_LESS_THAN     &hm LALT GB_LEFT_PARENTHESIS  &hm LSHIFT GB_LEFT_BRACE  &hm LCTRL GB_LEFT_BRACKET  &kp GB_MINUS       &hm RCTRL GB_EQUAL  &hm RSHFT GB_EXCLAMATION  &hm RALT GB_HASH  &kp GB_SEMICOLON  &kp GB_BACKSLASH
&kp GB_GREATER_THAN  &kp RPAR                      &kp GB_RIGHT_BRACE        &kp GB_RIGHT_BRACKET       &kp GB_UNDERSCORE  &kp GB_PLUS         &kp GB_AT_SIGN            &kp GB_DOLLAR     &kp GB_COLON      &kp GB_PIPE
                                                                             &none                      &kp GB_AMPERSAND   &to FUNCTIONS       &to BASE                  &kp GB_ASTERISK   &none
            >;
        };

        functions_layer {
            label = "FUNC";
            bindings = <
&kp F1      &kp F2      &kp F3      &kp F4       &kp F5      &kp F6      &kp F7       &kp F8        &kp F9        &kp F10
&kp LSHIFT  &kp LCTRL   &kp LALT    &kp LGUI     &none       &none       &kp RGUI     &kp RALT      &kp RCTRL     &mt RSHIFT F11
&bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &bootloader  &sys_reset  &sys_reset  &bootloader  &bt BT_SEL 0  &bt BT_SEL 1  &kp F12
                                    &none        &none       &to MOUSE   &to BASE     &out OUT_USB         &out OUT_BLE
            >;
        };

        shortcuts_layer {
            bindings = <
&kp GB_GRAVE  &kp TAB  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB       &trans   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                               &kp LALT  &trans  &trans  &trans  &trans  &none
            >;

            label = "SHORTCUTS";
        };

        mouse_layer {
            label = "MSE";
            bindings = <
&none      &none     &none     &none      &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &msc SCRL_RIGHT
&kp LCTRL  &kp LGUI  &kp LALT  &kp LSHFT  &none  &none           &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&none      &none     &none     &none      &none  &none           &mkp MB4        &mkp MCLK       &mkp MB5         &none
                               &none      &none  &to NAVIGATION  &to BASE        &mkp LCLK       &mkp RCLK
            >;
        };
    };
};
